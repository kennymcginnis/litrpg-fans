// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  notes       Note[]
  reviews     UsersReviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ratings {
  id      String  @id @default(cuid())
  rating  Decimal
  reviews Int

  book     Book?   @relation(fields: [bookId], references: [id])
  bookId   String? @unique
  series   Series? @relation(fields: [seriesId], references: [id])
  seriesId String? @unique
}

model UsersReviews {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  rating   Int
  review   String?
  dateRead String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, bookId])
}

model Author {
  id        String @id @default(cuid())
  fullName  String
  lastFirst String

  links  Link[]
  images AuthorImage[]
  books  AuthorsBooks[]
  series AuthorsSeries[]
  notes  NotesOnAuthors[]

  createdBy String   @default("System")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthorImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String @unique

  createdBy String   @default("System")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([authorId])
}

model Link {
  id     String @id @default(cuid())
  source String
  url    String

  author   Author? @relation(fields: [authorId], references: [id])
  authorId String?
  book     Book?   @relation(fields: [bookId], references: [id])
  bookId   String?
  series   Series? @relation(fields: [seriesId], references: [id])
  seriesId String?
}

model Book {
  id          String @id @default(cuid())
  title       String
  description String

  rating Ratings?

  isbn          String?
  isbn13        String?
  asin          String?
  pages         Int?
  datePublished String?
  grno          String

  links Link[]

  series         Series? @relation(fields: [seriesId], references: [id])
  seriesId       String?
  seriesSequence Int?

  authors AuthorsBooks[]
  tags    TagsOnBooks[]
  images  BookImage[]
  notes   NotesOnBooks[]
  reviews UsersReviews[]

  createdBy String   @default("System")
  createdAt DateTime @default(now())
  updatedBy String   @default("System")
  updatedAt DateTime @updatedAt
}

model BookImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  size        String  @default("md")

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId String

  createdBy String   @default("System")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([bookId])
}

model Series {
  id   String @id @default(cuid())
  name String

  rating Ratings?

  links Link[]
  books Book[]

  tags    TagsOnSeries[]
  authors AuthorsSeries[]
  notes   NotesOnSeries[]

  createdBy String   @default("System")
  createdAt DateTime @default(now())
  updatedBy String   @default("System")
  updatedAt DateTime @updatedAt
}

model AuthorsBooks {
  author   Author @relation(fields: [authorId], references: [id])
  authorId String
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   String

  assignedBy String   @default("System")
  assignedAt DateTime @default(now())

  @@id([authorId, bookId])
}

model AuthorsSeries {
  author   Author @relation(fields: [authorId], references: [id])
  authorId String
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  assignedBy String   @default("System")
  assignedAt DateTime @default(now())

  @@id([authorId, seriesId])
}

model Tag {
  id String @id @default(cuid())

  tagsOnBooks  TagsOnBooks[]
  tagsOnSeries TagsOnSeries[]

  createdBy String   @default("System")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagsOnBooks {
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  assignedBy String   @default("System")
  assignedAt DateTime @default(now())

  @@id([tagId, bookId])
}

model TagsOnSeries {
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  assignedBy String   @default("System")
  assignedAt DateTime @default(now())

  @@id([tagId, seriesId])
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  notesOnAuthors NotesOnAuthors[]
  notesOnBooks   NotesOnBooks[]
  notesOnSeries  NotesOnSeries[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([noteId])
}

model NotesOnAuthors {
  note     Note   @relation(fields: [noteId], references: [id])
  noteId   String
  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  assignedBy String
  assignedAt DateTime @default(now())

  @@id([noteId, authorId])
}

model NotesOnBooks {
  note   Note   @relation(fields: [noteId], references: [id])
  noteId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  assignedBy String
  assignedAt DateTime @default(now())

  @@id([noteId, bookId])
}

model NotesOnSeries {
  note     Note   @relation(fields: [noteId], references: [id])
  noteId   String
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  assignedBy String
  assignedAt DateTime @default(now())

  @@id([noteId, seriesId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerName, providerId])
}
